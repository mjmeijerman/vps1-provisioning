---

- name: Add github.com to known_hosts file
  lineinfile: dest=/etc/ssh/ssh_known_hosts line="{{ lookup('pipe', 'ssh-keyscan github.com') }}" state=present  create=yes mode=0644

- name: Create deploy user
  user: name={{ deploy_user }} groups=www-data shell=/bin/bash state=present password=$6$rounds=100000$Ma2q.iH0Aj6l3SAp$oYVMw4G0AOoCTiLEews.B7DEYAtg39JQg8y2dUx8zVsL22/rVK6KatHvUGrl/PYZUIghg1ic9/TkB7loCTznO1

- name: Add personal authorized key to deploy user
  authorized_key: user={{ deploy_user }} key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

- name: Add deploy user SSH key
  copy: content="{{ deploy_user_private_key }}" dest=/home/{{ deploy_user }}/.ssh/id_rsa owner={{ deploy_user }} group={{ deploy_user }} mode=0600

- name: Add deploy user SSH public_key
  copy: content="{{ deploy_user_public_key }}" dest=/home/{{ deploy_user }}/.ssh/id_rsa.pub owner={{ deploy_user }} group={{ deploy_user }} mode=0600

- name: write sudoers for user
  template: src={{ inventory_dir }}/roles/webserver/templates/sudoers.j2 dest=/etc/sudoers.d/{{ deploy_user }} validate='visudo -cf %s'

- name: Create 'websites' user
  user:
    name: websites
    groups: www-data
    shell: /bin/bash

- name: Create website directories
  file:
    path: "/home/websites/{{ item }}"
    state: directory
    owner: websites
    group: websites
  with_items: "{{ nginx_server_templates_websites | pluck('name') | difference(['defaultssl']) | unique }}"

- name: add composer file for wordpress cli
  template:
    src: "{{ inventory_dir }}/roles/webserver/templates/composer.json.j2"
    dest: "/home/websites/composer.json"
    owner: websites
    group: websites
    mode: 0644

- name: install wordpress cli using composer
  become: true
  become_user: 'websites'
  shell: |
    composer update --working-dir=/home/websites

- name: Check to see if file exists
  stat:
    path: "/home/websites/{{ item.name }}/wp-config.php"
  register: stat_results
  with_items: "{{ nginx_server_templates_websites }}"
  ignore_errors: True

- name: Remove all files when wp-config file does not exist
  become: true
  become_user: 'websites'
  shell: |
    rm -rf /home/websites/{{ item.item.name }}/*
  with_items: "{{ stat_results.results }}"
  when: item.stat.exists == False

- name: Download wordpress core
  become: true
  become_user: 'websites'
  shell: |
    /home/websites/vendor/bin/wp core download --path=/home/websites/{{ item.item.name }} --locale=nl_NL
  with_items: "{{ stat_results.results }}"
  when: item.stat.exists == False

- name: Wordpress configuration
  become: true
  become_user: 'websites'
  shell: |
    /home/websites/vendor/bin/wp core config --path=/home/websites/{{ item.item.name }} --dbname={{ item.item.db_name }} --dbuser={{ item.item.db_user }} --dbpass={{ item.item.db_password }} --dbhost=localhost
  with_items: "{{ stat_results.results }}"
  when: item.stat.exists == False

- name: Wordpress configuration file permissions
  become: true
  become_user: 'websites'
  shell: |
    chmod 644 /home/websites/{{ item.item.name }}/wp-config.php
  with_items: "{{ stat_results.results }}"

- name: Wordpress core installation
  become: true
  become_user: 'websites'
  shell: |
    /home/websites/vendor/bin/wp core install --path=/home/websites/{{ item.item.name }} --url={{ item.item.url }} --title="{{ item.item.label }}" --admin_name={{ item.item.admin_username }} --admin_password={{ item.item.admin_password }} --admin_email={{ item.item.admin_email }}
  with_items: "{{ stat_results.results }}"
  when: item.stat.exists == False

- name: Disable the JSON api
  command: /home/websites/vendor/bin/wp plugin install disable-json-api --activate chdir=/home/websites/{{ item.item.name }}
  become_user: 'websites'
  with_items: "{{ stat_results.results }}"

- name: Disable XML-RPC
  command: /home/websites/vendor/bin/wp plugin install disable-xml-rpc --activate chdir=/home/websites/{{ item.item.name }}
  become_user: 'websites'
  with_items: "{{ stat_results.results }}"

- name: Install WordFence
  command: /home/websites/vendor/bin/wp plugin install wordfence --activate chdir=/home/websites/{{ item.item.name }}
  become_user: 'websites'
  with_items: "{{ stat_results.results }}"

- name: Make sure that all web writable folders exist
  become: true
  become_user: 'websites'
  file: path="{{ item }}" state=directory recurse=yes
  with_items: "{{ web_writable_folders }}"

- name: Set web_user ACL privileges on directories
  acl: name={{ item }} entity={{ nginx_user }} etype=user permissions=rwx state=present recursive=yes
  with_items: "{{ web_writable_folders }}"

- name: Set web_user default ACL privileges on directories
  acl: name={{ item }} entity={{ nginx_user }} etype=user permissions=rwx default=yes state=present recursive=yes
  with_items: "{{ web_writable_folders }}"
